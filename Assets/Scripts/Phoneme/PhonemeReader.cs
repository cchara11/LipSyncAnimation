using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using UnityEngine;

///-----------------------------------------------------------------
///   Class:        PhonemeReader.cs
///   Description:  Reads the phonemic information generated by
///                 the text-to-speech engine
///   Author:       Constantinos Charalambous     Date: 28/06/2017
///   Notes:        Phoneme Reader
///-----------------------------------------------------------------

public static class PhonemeReader
{
    /// <summary>
    /// Reads phoneme timings from the output file (phonemes.txt)
    /// The output file is produced when synthesining audio, using CereVoice
    /// <param name="file">File containing phonemic information</param>
    /// <returns></returns>
    public static List<PhonemeInfo> ReadPhonemeTimings(string file)
    {
        List<PhonemeInfo> phonemeInformation = new List<PhonemeInfo>();
        float totalAudioDuration = 0;

        // should be added to Application.streamingAssetsPath when build
        using (StreamReader reader = new StreamReader(file))
        {
            string line;
            int audioParts = 0;
            float audioDuration = 0;

            while ((line = reader.ReadLine()) != null)
            {
                if (line.Contains("wav"))
                {
                    float prevDuration = audioDuration;
                    string[] line_contents = line.Split(null);
                    int audioSampleDuration = int.Parse(line_contents[4]);
                    audioDuration = AudioInfo.getExactDuration(audioSampleDuration);
                    audioParts += 1;
                    totalAudioDuration += prevDuration;
                }

                if (line.Contains("phoneme"))
                {
                    string[] line_contents = line.Split(':');
                    string[] phoneme_info = line_contents[2].Split(null);

                    // parse phoneme timings for multi audio parts
                    float startOffset = float.Parse(phoneme_info[1], CultureInfo.InvariantCulture.NumberFormat);
                    float endOffset = float.Parse(phoneme_info[2], CultureInfo.InvariantCulture.NumberFormat);

                    if (audioParts > 1)
                    {
                        startOffset += totalAudioDuration;
                        endOffset += totalAudioDuration;
                    }

                    PhonemeInfo phoneme = new PhonemeInfo(startOffset, endOffset, phoneme_info[3]);
                    phonemeInformation.Add(phoneme);
                }

            }
        }

        return phonemeInformation;
    }
    

}
