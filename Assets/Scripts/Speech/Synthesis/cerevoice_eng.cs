//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public enum CPRC_VOICE_LOAD_TYPE {
  CPRC_VOICE_LOAD = 0,
  CPRC_VOICE_LOAD_EMB = 1,
  CPRC_VOICE_LOAD_EMB_AUDIO = 2,
  CPRC_VOICE_LOAD_MEMMAP = 3,
  CPRC_VOICE_LOAD_TP = 4
}

public enum CPRCEN_AUDIO_FORMAT {
  CPRCEN_RAW = 0,
  CPRCEN_RIFF = 1,
  CPRCEN_AIFF = 2
}

public enum CPRCEN_SYNTH_TYPE {
  CPRCEN_SYNTH_NONE = -1,
  CPRCEN_SYNTH_USEL = 0,
  CPRCEN_SYNTH_HTS = 1,
  CPRCEN_SYNTH_HTSPROS = 2,
  CPRCEN_SYNTH_PARAM = 3,
  CPRCEN_SYNTH_HYBRID = 4
}

public enum CPRCEN_INTERRUPT_BOUNDARY_TYPE {
  CPRCEN_INTERRUPT_BOUNDARY_PHONE = 0,
  CPRCEN_INTERRUPT_BOUNDARY_WORD = 1,
  CPRCEN_INTERRUPT_BOUNDARY_NATURAL = 2,
  CPRCEN_INTERRUPT_BOUNDARY_DEFAULT = 2,
  CPRCEN_INTERRUPT_BOUNDARY_LEGACY_SPURT = 3
}

public enum CPRCEN_INTERRUPT_INTERRUPT_TYPE {
  CPRCEN_INTERRUPT_INTERRUPT_HALT = 0,
  CPRCEN_INTERRUPT_INTERRUPT_OVERLAP = 1,
  CPRCEN_INTERRUPT_INTERRUPT_POLITE = 2,
  CPRCEN_INTERRUPT_INTERRUPT_ANGRY = 3,
  CPRCEN_INTERRUPT_INTERRUPT_REPLAN = 3
}

public enum CPRC_ABUF_TRANS_TYPE {
  CPRC_ABUF_TRANS_PHONE = 0,
  CPRC_ABUF_TRANS_WORD = 1,
  CPRC_ABUF_TRANS_MARK = 2,
  CPRC_ABUF_TRANS_ERROR = 3,
  CPRC_ABUF_TRANS_TYPES = 4
}

public class CPRC_abuf_trans : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPRC_abuf_trans(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPRC_abuf_trans obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPRC_abuf_trans() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cerevoice_engPINVOKE.delete_CPRC_abuf_trans(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string name {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_name_set(swigCPtr, value);
    } 
    get {
      string ret = cerevoice_engPINVOKE.CPRC_abuf_trans_name_get(swigCPtr);
      return ret;
    } 
  }

  public CPRC_ABUF_TRANS_TYPE type {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_type_set(swigCPtr, (int)value);
    } 
    get {
      CPRC_ABUF_TRANS_TYPE ret = (CPRC_ABUF_TRANS_TYPE)cerevoice_engPINVOKE.CPRC_abuf_trans_type_get(swigCPtr);
      return ret;
    } 
  }

  public float start {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_start_set(swigCPtr, value);
    } 
    get {
      float ret = cerevoice_engPINVOKE.CPRC_abuf_trans_start_get(swigCPtr);
      return ret;
    } 
  }

  public float end {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_end_set(swigCPtr, value);
    } 
    get {
      float ret = cerevoice_engPINVOKE.CPRC_abuf_trans_end_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_CPRC_abuf_dsp dsp {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_dsp_set(swigCPtr, SWIGTYPE_p_CPRC_abuf_dsp.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_abuf_trans_dsp_get(swigCPtr);
      SWIGTYPE_p_CPRC_abuf_dsp ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf_dsp(cPtr, false);
      return ret;
    } 
  }

  public string phone {
    set {
      cerevoice_engPINVOKE.CPRC_abuf_trans_phone_set(swigCPtr, value);
    } 
    get {
      string ret = cerevoice_engPINVOKE.CPRC_abuf_trans_phone_get(swigCPtr);
      return ret;
    } 
  }

  public CPRC_abuf_trans() : this(cerevoice_engPINVOKE.new_CPRC_abuf_trans(), true) {
  }

}

public class CPTP_fixedbuf : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPTP_fixedbuf(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPTP_fixedbuf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPTP_fixedbuf() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cerevoice_engPINVOKE.delete_CPTP_fixedbuf(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int _size {
    set {
      cerevoice_engPINVOKE.CPTP_fixedbuf__size_set(swigCPtr, value);
    } 
    get {
      int ret = cerevoice_engPINVOKE.CPTP_fixedbuf__size_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char _buffer {
    set {
      cerevoice_engPINVOKE.CPTP_fixedbuf__buffer_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPTP_fixedbuf__buffer_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public CPTP_fixedbuf() : this(cerevoice_engPINVOKE.new_CPTP_fixedbuf(), true) {
  }

}

public class CPRCEN_wav : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CPRCEN_wav(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPRCEN_wav obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CPRCEN_wav() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cerevoice_engPINVOKE.delete_CPRCEN_wav(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_short wavdata {
    set {
      cerevoice_engPINVOKE.CPRCEN_wav_wavdata_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_wav_wavdata_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public int size {
    set {
      cerevoice_engPINVOKE.CPRCEN_wav_size_set(swigCPtr, value);
    } 
    get {
      int ret = cerevoice_engPINVOKE.CPRCEN_wav_size_get(swigCPtr);
      return ret;
    } 
  }

  public int sample_rate {
    set {
      cerevoice_engPINVOKE.CPRCEN_wav_sample_rate_set(swigCPtr, value);
    } 
    get {
      int ret = cerevoice_engPINVOKE.CPRCEN_wav_sample_rate_get(swigCPtr);
      return ret;
    } 
  }

  public CPRCEN_wav() : this(cerevoice_engPINVOKE.new_CPRCEN_wav(), true) {
  }

}

class cerevoice_engPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="SWIGRegisterExceptionCallbacks_cerevoice_eng")]
    public static extern void SWIGRegisterExceptionCallbacks_cerevoice_eng(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_cerevoice_eng")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_cerevoice_eng(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_cerevoice_eng(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_cerevoice_eng(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(cerevoice_engPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(cerevoice_engPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="SWIGRegisterStringCallback_cerevoice_eng")]
    public static extern void SWIGRegisterStringCallback_cerevoice_eng(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_cerevoice_eng(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static cerevoice_engPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_name_set")]
  public static extern void CPRC_abuf_trans_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_name_get")]
  public static extern string CPRC_abuf_trans_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_type_set")]
  public static extern void CPRC_abuf_trans_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_type_get")]
  public static extern int CPRC_abuf_trans_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_start_set")]
  public static extern void CPRC_abuf_trans_start_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_start_get")]
  public static extern float CPRC_abuf_trans_start_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_end_set")]
  public static extern void CPRC_abuf_trans_end_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_end_get")]
  public static extern float CPRC_abuf_trans_end_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_dsp_set")]
  public static extern void CPRC_abuf_trans_dsp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_dsp_get")]
  public static extern global::System.IntPtr CPRC_abuf_trans_dsp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_phone_set")]
  public static extern void CPRC_abuf_trans_phone_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_phone_get")]
  public static extern string CPRC_abuf_trans_phone_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_new_CPRC_abuf_trans")]
  public static extern global::System.IntPtr new_CPRC_abuf_trans();

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_delete_CPRC_abuf_trans")]
  public static extern void delete_CPRC_abuf_trans(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPTP_fixedbuf__size_set")]
  public static extern void CPTP_fixedbuf__size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPTP_fixedbuf__size_get")]
  public static extern int CPTP_fixedbuf__size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPTP_fixedbuf__buffer_set")]
  public static extern void CPTP_fixedbuf__buffer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPTP_fixedbuf__buffer_get")]
  public static extern global::System.IntPtr CPTP_fixedbuf__buffer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_new_CPTP_fixedbuf")]
  public static extern global::System.IntPtr new_CPTP_fixedbuf();

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_delete_CPTP_fixedbuf")]
  public static extern void delete_CPTP_fixedbuf(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_new")]
  public static extern global::System.IntPtr CPRCEN_engine_new();

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load")]
  public static extern global::System.IntPtr CPRCEN_engine_load(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_config")]
  public static extern global::System.IntPtr CPRCEN_engine_load_config(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_voice")]
  public static extern int CPRCEN_engine_load_voice(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_voice_licensestr")]
  public static extern int CPRCEN_engine_load_voice_licensestr(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, string jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_unload_voice")]
  public static extern int CPRCEN_engine_unload_voice(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_delete")]
  public static extern void CPRCEN_engine_delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_user_lexicon")]
  public static extern int CPRCEN_engine_load_user_lexicon(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_user_abbreviations")]
  public static extern int CPRCEN_engine_load_user_abbreviations(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_channel_lexicon")]
  public static extern int CPRCEN_engine_load_channel_lexicon(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_channel_pls")]
  public static extern int CPRCEN_engine_load_channel_pls(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_channel_abbreviation")]
  public static extern int CPRCEN_engine_load_channel_abbreviation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_load_channel_pbreak")]
  public static extern int CPRCEN_engine_load_channel_pbreak(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_get_voice_count")]
  public static extern int CPRCEN_engine_get_voice_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_get_voice_info")]
  public static extern string CPRCEN_engine_get_voice_info(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_get_voice_file_info")]
  public static extern string CPRCEN_engine_get_voice_file_info(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_open_channel")]
  public static extern int CPRCEN_engine_open_channel(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_open_default_channel")]
  public static extern int CPRCEN_engine_open_default_channel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_reset")]
  public static extern int CPRCEN_engine_channel_reset(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_close")]
  public static extern int CPRCEN_engine_channel_close(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_set_callback")]
  public static extern int CPRCEN_engine_set_callback(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_clear_callback")]
  public static extern int CPRCEN_engine_clear_callback(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_get_channel_userdata")]
  public static extern global::System.IntPtr CPRCEN_engine_get_channel_userdata(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_speak")]
  public static extern global::System.IntPtr CPRCEN_engine_channel_speak(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_interrupt")]
  public static extern global::System.IntPtr CPRCEN_engine_channel_interrupt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4, float jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_channel_get_voice_info")]
  public static extern string CPRCEN_channel_get_voice_info(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_to_file")]
  public static extern int CPRCEN_engine_channel_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_append_to_file")]
  public static extern int CPRCEN_engine_channel_append_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_force_append_to_file")]
  public static extern int CPRCEN_engine_channel_force_append_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_channel_no_file")]
  public static extern int CPRCEN_engine_channel_no_file(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_channel_synth_type_hts")]
  public static extern int CPRCEN_channel_synth_type_hts(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_channel_synth_type_usel")]
  public static extern int CPRCEN_channel_synth_type_usel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_channel_set_phone_min_max")]
  public static extern int CPRCEN_channel_set_phone_min_max(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_get_trans")]
  public static extern global::System.IntPtr CPRC_abuf_get_trans(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_sz")]
  public static extern int CPRC_abuf_trans_sz(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_name")]
  public static extern string CPRC_abuf_trans_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_type")]
  public static extern int CPRC_abuf_trans_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_start")]
  public static extern float CPRC_abuf_trans_start(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_trans_end")]
  public static extern float CPRC_abuf_trans_end(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav_sz")]
  public static extern int CPRC_abuf_wav_sz(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav")]
  public static extern short CPRC_abuf_wav(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav_data")]
  public static extern global::System.IntPtr CPRC_abuf_wav_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav_mk")]
  public static extern int CPRC_abuf_wav_mk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav_done")]
  public static extern int CPRC_abuf_wav_done(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_wav_srate")]
  public static extern int CPRC_abuf_wav_srate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_riff_save")]
  public static extern int CPRC_riff_save(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_riff_append")]
  public static extern int CPRC_riff_append(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_riff_save_trans")]
  public static extern int CPRC_riff_save_trans(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_riff_buffer")]
  public static extern global::System.IntPtr CPRC_riff_buffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPTP_fixedbuf_delete")]
  public static extern void CPTP_fixedbuf_delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_copy")]
  public static extern global::System.IntPtr CPRC_abuf_copy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_delete")]
  public static extern void CPRC_abuf_delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRC_abuf_append")]
  public static extern global::System.IntPtr CPRC_abuf_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_wavdata_set")]
  public static extern void CPRCEN_wav_wavdata_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_wavdata_get")]
  public static extern global::System.IntPtr CPRCEN_wav_wavdata_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_size_set")]
  public static extern void CPRCEN_wav_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_size_get")]
  public static extern int CPRCEN_wav_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_sample_rate_set")]
  public static extern void CPRCEN_wav_sample_rate_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_wav_sample_rate_get")]
  public static extern int CPRCEN_wav_sample_rate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_new_CPRCEN_wav")]
  public static extern global::System.IntPtr new_CPRCEN_wav();

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_delete_CPRCEN_wav")]
  public static extern void delete_CPRCEN_wav(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_speak")]
  public static extern global::System.IntPtr CPRCEN_engine_speak(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_speak_to_file")]
  public static extern int CPRCEN_engine_speak_to_file(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_eng", EntryPoint="CSharp_CPRCEN_engine_clear")]
  public static extern int CPRCEN_engine_clear(global::System.Runtime.InteropServices.HandleRef jarg1);
}

public class cerevoice_eng {
  public static SWIGTYPE_p_CPRCEN_engine CPRCEN_engine_new() {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_new();
    SWIGTYPE_p_CPRCEN_engine ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRCEN_engine(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_CPRCEN_engine CPRCEN_engine_load(string licensef, string voicef) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_load(licensef, voicef);
    SWIGTYPE_p_CPRCEN_engine ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRCEN_engine(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_CPRCEN_engine CPRCEN_engine_load_config(string licensef, string voicef, string voice_configf) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_load_config(licensef, voicef, voice_configf);
    SWIGTYPE_p_CPRCEN_engine ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRCEN_engine(cPtr, false);
    return ret;
  }

  public static int CPRCEN_engine_load_voice(SWIGTYPE_p_CPRCEN_engine eng, string licensef, string configf, string voicef, CPRC_VOICE_LOAD_TYPE load_type) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_voice(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), licensef, configf, voicef, (int)load_type);
    return ret;
  }

  public static int CPRCEN_engine_load_voice_licensestr(SWIGTYPE_p_CPRCEN_engine eng, string license_text, string signature, string configf, string voicef, CPRC_VOICE_LOAD_TYPE load_type) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_voice_licensestr(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), license_text, signature, configf, voicef, (int)load_type);
    return ret;
  }

  public static int CPRCEN_engine_unload_voice(SWIGTYPE_p_CPRCEN_engine eng, int voice_index) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_unload_voice(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), voice_index);
    return ret;
  }

  public static void CPRCEN_engine_delete(SWIGTYPE_p_CPRCEN_engine eng) {
    cerevoice_engPINVOKE.CPRCEN_engine_delete(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng));
  }

  public static int CPRCEN_engine_load_user_lexicon(SWIGTYPE_p_CPRCEN_engine eng, int voice_index, string fname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_user_lexicon(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), voice_index, fname);
    return ret;
  }

  public static int CPRCEN_engine_load_user_abbreviations(SWIGTYPE_p_CPRCEN_engine eng, int voice_index, string fname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_user_abbreviations(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), voice_index, fname);
    return ret;
  }

  public static int CPRCEN_engine_load_channel_lexicon(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, string lname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_channel_lexicon(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, lname);
    return ret;
  }

  public static int CPRCEN_engine_load_channel_pls(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, string lname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_channel_pls(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, lname);
    return ret;
  }

  public static int CPRCEN_engine_load_channel_abbreviation(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, string aname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_channel_abbreviation(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, aname);
    return ret;
  }

  public static int CPRCEN_engine_load_channel_pbreak(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_load_channel_pbreak(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname);
    return ret;
  }

  public static int CPRCEN_engine_get_voice_count(SWIGTYPE_p_CPRCEN_engine eng) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_get_voice_count(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng));
    return ret;
  }

  public static string CPRCEN_engine_get_voice_info(SWIGTYPE_p_CPRCEN_engine eng, int voice_index, string key) {
    string ret = cerevoice_engPINVOKE.CPRCEN_engine_get_voice_info(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), voice_index, key);
    return ret;
  }

  public static string CPRCEN_engine_get_voice_file_info(string fname, string key) {
    string ret = cerevoice_engPINVOKE.CPRCEN_engine_get_voice_file_info(fname, key);
    return ret;
  }

  public static int CPRCEN_engine_open_channel(SWIGTYPE_p_CPRCEN_engine eng, string iso_language_code, string iso_region_code, string voice_name, string srate) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_open_channel(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), iso_language_code, iso_region_code, voice_name, srate);
    return ret;
  }

  public static int CPRCEN_engine_open_default_channel(SWIGTYPE_p_CPRCEN_engine eng) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_open_default_channel(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng));
    return ret;
  }

  public static int CPRCEN_engine_channel_reset(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_reset(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static int CPRCEN_engine_channel_close(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_close(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static int CPRCEN_engine_set_callback(SWIGTYPE_p_CPRCEN_engine eng, int chan, SWIGTYPE_p_void userdata, SWIGTYPE_p_f_p_CPRC_abuf_p_void__void callback) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_set_callback(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, SWIGTYPE_p_void.getCPtr(userdata), SWIGTYPE_p_f_p_CPRC_abuf_p_void__void.getCPtr(callback));
    return ret;
  }

  public static int CPRCEN_engine_clear_callback(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_clear_callback(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static SWIGTYPE_p_void CPRCEN_engine_get_channel_userdata(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_get_channel_userdata(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_CPRC_abuf CPRCEN_engine_channel_speak(SWIGTYPE_p_CPRCEN_engine eng, int chan, string text, int textlen, int flush) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_channel_speak(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, text, textlen, flush);
    SWIGTYPE_p_CPRC_abuf ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_CPRC_abuf CPRCEN_engine_channel_interrupt(SWIGTYPE_p_CPRCEN_engine eng, int chan, string spurtxml, int xmllen, float earliest_time, CPRCEN_INTERRUPT_BOUNDARY_TYPE btype, CPRCEN_INTERRUPT_INTERRUPT_TYPE itype) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_channel_interrupt(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, spurtxml, xmllen, earliest_time, (int)btype, (int)itype);
    SWIGTYPE_p_CPRC_abuf ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf(cPtr, false);
    return ret;
  }

  public static string CPRCEN_channel_get_voice_info(SWIGTYPE_p_CPRCEN_engine eng, int chan, string key) {
    string ret = cerevoice_engPINVOKE.CPRCEN_channel_get_voice_info(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, key);
    return ret;
  }

  public static int CPRCEN_engine_channel_to_file(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, CPRCEN_AUDIO_FORMAT format) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_to_file(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, (int)format);
    return ret;
  }

  public static int CPRCEN_engine_channel_append_to_file(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, CPRCEN_AUDIO_FORMAT format) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_append_to_file(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, (int)format);
    return ret;
  }

  public static int CPRCEN_engine_channel_force_append_to_file(SWIGTYPE_p_CPRCEN_engine eng, int chan, string fname, CPRCEN_AUDIO_FORMAT format) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_force_append_to_file(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, fname, (int)format);
    return ret;
  }

  public static int CPRCEN_engine_channel_no_file(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_channel_no_file(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static int CPRCEN_channel_synth_type_hts(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_channel_synth_type_hts(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static int CPRCEN_channel_synth_type_usel(SWIGTYPE_p_CPRCEN_engine eng, int chan) {
    int ret = cerevoice_engPINVOKE.CPRCEN_channel_synth_type_usel(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan);
    return ret;
  }

  public static int CPRCEN_channel_set_phone_min_max(SWIGTYPE_p_CPRCEN_engine eng, int chan, int min, int max) {
    int ret = cerevoice_engPINVOKE.CPRCEN_channel_set_phone_min_max(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, min, max);
    return ret;
  }

  public static SWIGTYPE_p_CPRC_abuf_trans CPRC_abuf_get_trans(SWIGTYPE_p_CPRC_abuf ab, int i) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_abuf_get_trans(SWIGTYPE_p_CPRC_abuf.getCPtr(ab), i);
    SWIGTYPE_p_CPRC_abuf_trans ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf_trans(cPtr, false);
    return ret;
  }

  public static int CPRC_abuf_trans_sz(SWIGTYPE_p_CPRC_abuf ab) {
    int ret = cerevoice_engPINVOKE.CPRC_abuf_trans_sz(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    return ret;
  }

  public static string CPRC_abuf_trans_name(SWIGTYPE_p_CPRC_abuf_trans t) {
    string ret = cerevoice_engPINVOKE.CPRC_abuf_trans_name(SWIGTYPE_p_CPRC_abuf_trans.getCPtr(t));
    return ret;
  }

  public static CPRC_ABUF_TRANS_TYPE CPRC_abuf_trans_type(SWIGTYPE_p_CPRC_abuf_trans t) {
    CPRC_ABUF_TRANS_TYPE ret = (CPRC_ABUF_TRANS_TYPE)cerevoice_engPINVOKE.CPRC_abuf_trans_type(SWIGTYPE_p_CPRC_abuf_trans.getCPtr(t));
    return ret;
  }

  public static float CPRC_abuf_trans_start(SWIGTYPE_p_CPRC_abuf_trans t) {
    float ret = cerevoice_engPINVOKE.CPRC_abuf_trans_start(SWIGTYPE_p_CPRC_abuf_trans.getCPtr(t));
    return ret;
  }

  public static float CPRC_abuf_trans_end(SWIGTYPE_p_CPRC_abuf_trans t) {
    float ret = cerevoice_engPINVOKE.CPRC_abuf_trans_end(SWIGTYPE_p_CPRC_abuf_trans.getCPtr(t));
    return ret;
  }

  public static int CPRC_abuf_wav_sz(SWIGTYPE_p_CPRC_abuf ab) {
    int ret = cerevoice_engPINVOKE.CPRC_abuf_wav_sz(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    return ret;
  }

  public static short CPRC_abuf_wav(SWIGTYPE_p_CPRC_abuf ab, int i) {
    short ret = cerevoice_engPINVOKE.CPRC_abuf_wav(SWIGTYPE_p_CPRC_abuf.getCPtr(ab), i);
    return ret;
  }

  public static SWIGTYPE_p_short CPRC_abuf_wav_data(SWIGTYPE_p_CPRC_abuf ab) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_abuf_wav_data(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
    return ret;
  }

  public static int CPRC_abuf_wav_mk(SWIGTYPE_p_CPRC_abuf ab) {
    int ret = cerevoice_engPINVOKE.CPRC_abuf_wav_mk(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    return ret;
  }

  public static int CPRC_abuf_wav_done(SWIGTYPE_p_CPRC_abuf ab) {
    int ret = cerevoice_engPINVOKE.CPRC_abuf_wav_done(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    return ret;
  }

  public static int CPRC_abuf_wav_srate(SWIGTYPE_p_CPRC_abuf ab) {
    int ret = cerevoice_engPINVOKE.CPRC_abuf_wav_srate(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    return ret;
  }

  public static int CPRC_riff_save(SWIGTYPE_p_CPRC_abuf wav, string fname) {
    int ret = cerevoice_engPINVOKE.CPRC_riff_save(SWIGTYPE_p_CPRC_abuf.getCPtr(wav), fname);
    return ret;
  }

  public static int CPRC_riff_append(SWIGTYPE_p_CPRC_abuf wav, string fname) {
    int ret = cerevoice_engPINVOKE.CPRC_riff_append(SWIGTYPE_p_CPRC_abuf.getCPtr(wav), fname);
    return ret;
  }

  public static int CPRC_riff_save_trans(SWIGTYPE_p_CPRC_abuf wav, string fname) {
    int ret = cerevoice_engPINVOKE.CPRC_riff_save_trans(SWIGTYPE_p_CPRC_abuf.getCPtr(wav), fname);
    return ret;
  }

  public static SWIGTYPE_p_CPTP_fixedbuf CPRC_riff_buffer(SWIGTYPE_p_CPRC_abuf wav) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_riff_buffer(SWIGTYPE_p_CPRC_abuf.getCPtr(wav));
    SWIGTYPE_p_CPTP_fixedbuf ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPTP_fixedbuf(cPtr, false);
    return ret;
  }

  public static void CPTP_fixedbuf_delete(SWIGTYPE_p_CPTP_fixedbuf fb) {
    cerevoice_engPINVOKE.CPTP_fixedbuf_delete(SWIGTYPE_p_CPTP_fixedbuf.getCPtr(fb));
  }

  public static SWIGTYPE_p_CPRC_abuf CPRC_abuf_copy(SWIGTYPE_p_CPRC_abuf ab) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_abuf_copy(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
    SWIGTYPE_p_CPRC_abuf ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf(cPtr, false);
    return ret;
  }

  public static void CPRC_abuf_delete(SWIGTYPE_p_CPRC_abuf ab) {
    cerevoice_engPINVOKE.CPRC_abuf_delete(SWIGTYPE_p_CPRC_abuf.getCPtr(ab));
  }

  public static SWIGTYPE_p_CPRC_abuf CPRC_abuf_append(SWIGTYPE_p_CPRC_abuf ab_out, SWIGTYPE_p_CPRC_abuf ab_in) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRC_abuf_append(SWIGTYPE_p_CPRC_abuf.getCPtr(ab_out), SWIGTYPE_p_CPRC_abuf.getCPtr(ab_in));
    SWIGTYPE_p_CPRC_abuf ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRC_abuf(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_CPRCEN_wav CPRCEN_engine_speak(SWIGTYPE_p_CPRCEN_engine eng, string text) {
    global::System.IntPtr cPtr = cerevoice_engPINVOKE.CPRCEN_engine_speak(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), text);
    SWIGTYPE_p_CPRCEN_wav ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPRCEN_wav(cPtr, false);
    return ret;
  }

  public static int CPRCEN_engine_speak_to_file(SWIGTYPE_p_CPRCEN_engine eng, string text, string fname) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_speak_to_file(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), text, fname);
    return ret;
  }

  public static int CPRCEN_engine_clear(SWIGTYPE_p_CPRCEN_engine eng) {
    int ret = cerevoice_engPINVOKE.CPRCEN_engine_clear(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng));
    return ret;
  }


public delegate void ChannelCallback (global::System.IntPtr abufp, global::System.IntPtr userdata);
[global::System.Runtime.InteropServices.DllImport("cerevoice_eng")]
public static extern void SetCallback(global::System.Runtime.InteropServices.HandleRef eng, int chan, ChannelCallback callback);
/* This is the callback function for end users of C# - the internal
   callback is wrapped to avoid users needing to handle the user data
   pointer or extract C pointers from the engine */
public static void SetChannelCallback(SWIGTYPE_p_CPRCEN_engine eng, int chan, ChannelCallback callback) {
    SetCallback(SWIGTYPE_p_CPRCEN_engine.getCPtr(eng), chan, callback);
}

}

public class SWIGTYPE_p_unsigned_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_f_p_CPRC_abuf_p_void__void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_f_p_CPRC_abuf_p_void__void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_f_p_CPRC_abuf_p_void__void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_f_p_CPRC_abuf_p_void__void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPRCEN_wav {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPRCEN_wav(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPRCEN_wav() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPRCEN_wav obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPRC_abuf_dsp {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPRC_abuf_dsp(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPRC_abuf_dsp() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPRC_abuf_dsp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPRCEN_engine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPRCEN_engine(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPRCEN_engine() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPRCEN_engine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPTP_fixedbuf {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPTP_fixedbuf(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPTP_fixedbuf() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPTP_fixedbuf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPRC_abuf {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPRC_abuf(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPRC_abuf() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPRC_abuf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CPRC_abuf_trans {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CPRC_abuf_trans(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CPRC_abuf_trans() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CPRC_abuf_trans obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_short {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_short(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_short() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_short obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}
